// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/kiln/fetcher"
	"github.com/pivotal-cf/kiln/release"
)

type MultiReleaseSource struct {
	DownloadReleaseStub        func(string, release.Remote, int) (release.Local, error)
	downloadReleaseMutex       sync.RWMutex
	downloadReleaseArgsForCall []struct {
		arg1 string
		arg2 release.Remote
		arg3 int
	}
	downloadReleaseReturns struct {
		result1 release.Local
		result2 error
	}
	downloadReleaseReturnsOnCall map[int]struct {
		result1 release.Local
		result2 error
	}
	FindByIDStub        func(string) (fetcher.ReleaseSource, error)
	findByIDMutex       sync.RWMutex
	findByIDArgsForCall []struct {
		arg1 string
	}
	findByIDReturns struct {
		result1 fetcher.ReleaseSource
		result2 error
	}
	findByIDReturnsOnCall map[int]struct {
		result1 fetcher.ReleaseSource
		result2 error
	}
	GetMatchedReleaseStub        func(release.Requirement) (release.Remote, bool, error)
	getMatchedReleaseMutex       sync.RWMutex
	getMatchedReleaseArgsForCall []struct {
		arg1 release.Requirement
	}
	getMatchedReleaseReturns struct {
		result1 release.Remote
		result2 bool
		result3 error
	}
	getMatchedReleaseReturnsOnCall map[int]struct {
		result1 release.Remote
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MultiReleaseSource) DownloadRelease(arg1 string, arg2 release.Remote, arg3 int) (release.Local, error) {
	fake.downloadReleaseMutex.Lock()
	ret, specificReturn := fake.downloadReleaseReturnsOnCall[len(fake.downloadReleaseArgsForCall)]
	fake.downloadReleaseArgsForCall = append(fake.downloadReleaseArgsForCall, struct {
		arg1 string
		arg2 release.Remote
		arg3 int
	}{arg1, arg2, arg3})
	fake.recordInvocation("DownloadRelease", []interface{}{arg1, arg2, arg3})
	fake.downloadReleaseMutex.Unlock()
	if fake.DownloadReleaseStub != nil {
		return fake.DownloadReleaseStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.downloadReleaseReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MultiReleaseSource) DownloadReleaseCallCount() int {
	fake.downloadReleaseMutex.RLock()
	defer fake.downloadReleaseMutex.RUnlock()
	return len(fake.downloadReleaseArgsForCall)
}

func (fake *MultiReleaseSource) DownloadReleaseCalls(stub func(string, release.Remote, int) (release.Local, error)) {
	fake.downloadReleaseMutex.Lock()
	defer fake.downloadReleaseMutex.Unlock()
	fake.DownloadReleaseStub = stub
}

func (fake *MultiReleaseSource) DownloadReleaseArgsForCall(i int) (string, release.Remote, int) {
	fake.downloadReleaseMutex.RLock()
	defer fake.downloadReleaseMutex.RUnlock()
	argsForCall := fake.downloadReleaseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *MultiReleaseSource) DownloadReleaseReturns(result1 release.Local, result2 error) {
	fake.downloadReleaseMutex.Lock()
	defer fake.downloadReleaseMutex.Unlock()
	fake.DownloadReleaseStub = nil
	fake.downloadReleaseReturns = struct {
		result1 release.Local
		result2 error
	}{result1, result2}
}

func (fake *MultiReleaseSource) DownloadReleaseReturnsOnCall(i int, result1 release.Local, result2 error) {
	fake.downloadReleaseMutex.Lock()
	defer fake.downloadReleaseMutex.Unlock()
	fake.DownloadReleaseStub = nil
	if fake.downloadReleaseReturnsOnCall == nil {
		fake.downloadReleaseReturnsOnCall = make(map[int]struct {
			result1 release.Local
			result2 error
		})
	}
	fake.downloadReleaseReturnsOnCall[i] = struct {
		result1 release.Local
		result2 error
	}{result1, result2}
}

func (fake *MultiReleaseSource) FindByID(arg1 string) (fetcher.ReleaseSource, error) {
	fake.findByIDMutex.Lock()
	ret, specificReturn := fake.findByIDReturnsOnCall[len(fake.findByIDArgsForCall)]
	fake.findByIDArgsForCall = append(fake.findByIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FindByID", []interface{}{arg1})
	fake.findByIDMutex.Unlock()
	if fake.FindByIDStub != nil {
		return fake.FindByIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findByIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MultiReleaseSource) FindByIDCallCount() int {
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	return len(fake.findByIDArgsForCall)
}

func (fake *MultiReleaseSource) FindByIDCalls(stub func(string) (fetcher.ReleaseSource, error)) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = stub
}

func (fake *MultiReleaseSource) FindByIDArgsForCall(i int) string {
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	argsForCall := fake.findByIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *MultiReleaseSource) FindByIDReturns(result1 fetcher.ReleaseSource, result2 error) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = nil
	fake.findByIDReturns = struct {
		result1 fetcher.ReleaseSource
		result2 error
	}{result1, result2}
}

func (fake *MultiReleaseSource) FindByIDReturnsOnCall(i int, result1 fetcher.ReleaseSource, result2 error) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = nil
	if fake.findByIDReturnsOnCall == nil {
		fake.findByIDReturnsOnCall = make(map[int]struct {
			result1 fetcher.ReleaseSource
			result2 error
		})
	}
	fake.findByIDReturnsOnCall[i] = struct {
		result1 fetcher.ReleaseSource
		result2 error
	}{result1, result2}
}

func (fake *MultiReleaseSource) GetMatchedRelease(arg1 release.Requirement) (release.Remote, bool, error) {
	fake.getMatchedReleaseMutex.Lock()
	ret, specificReturn := fake.getMatchedReleaseReturnsOnCall[len(fake.getMatchedReleaseArgsForCall)]
	fake.getMatchedReleaseArgsForCall = append(fake.getMatchedReleaseArgsForCall, struct {
		arg1 release.Requirement
	}{arg1})
	fake.recordInvocation("GetMatchedRelease", []interface{}{arg1})
	fake.getMatchedReleaseMutex.Unlock()
	if fake.GetMatchedReleaseStub != nil {
		return fake.GetMatchedReleaseStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getMatchedReleaseReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *MultiReleaseSource) GetMatchedReleaseCallCount() int {
	fake.getMatchedReleaseMutex.RLock()
	defer fake.getMatchedReleaseMutex.RUnlock()
	return len(fake.getMatchedReleaseArgsForCall)
}

func (fake *MultiReleaseSource) GetMatchedReleaseCalls(stub func(release.Requirement) (release.Remote, bool, error)) {
	fake.getMatchedReleaseMutex.Lock()
	defer fake.getMatchedReleaseMutex.Unlock()
	fake.GetMatchedReleaseStub = stub
}

func (fake *MultiReleaseSource) GetMatchedReleaseArgsForCall(i int) release.Requirement {
	fake.getMatchedReleaseMutex.RLock()
	defer fake.getMatchedReleaseMutex.RUnlock()
	argsForCall := fake.getMatchedReleaseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *MultiReleaseSource) GetMatchedReleaseReturns(result1 release.Remote, result2 bool, result3 error) {
	fake.getMatchedReleaseMutex.Lock()
	defer fake.getMatchedReleaseMutex.Unlock()
	fake.GetMatchedReleaseStub = nil
	fake.getMatchedReleaseReturns = struct {
		result1 release.Remote
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *MultiReleaseSource) GetMatchedReleaseReturnsOnCall(i int, result1 release.Remote, result2 bool, result3 error) {
	fake.getMatchedReleaseMutex.Lock()
	defer fake.getMatchedReleaseMutex.Unlock()
	fake.GetMatchedReleaseStub = nil
	if fake.getMatchedReleaseReturnsOnCall == nil {
		fake.getMatchedReleaseReturnsOnCall = make(map[int]struct {
			result1 release.Remote
			result2 bool
			result3 error
		})
	}
	fake.getMatchedReleaseReturnsOnCall[i] = struct {
		result1 release.Remote
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *MultiReleaseSource) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadReleaseMutex.RLock()
	defer fake.downloadReleaseMutex.RUnlock()
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	fake.getMatchedReleaseMutex.RLock()
	defer fake.getMatchedReleaseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MultiReleaseSource) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fetcher.MultiReleaseSource = new(MultiReleaseSource)
