#!/usr/bin/env bash

set -euo pipefail

bin_dir="$(cd "$(dirname "${0}")" && pwd)"
#source "${bin_dir}/helpers.sh"

: "${PRODUCT:=srt}"
: "${STEMCELL_PATH:=}"
: "${STUB_RELEASES:=false}"

export version=2

function copy_tile_contents() {
  echo "Copying ${tile_dir} directory to ${build_dir}..." > /dev/stderr
  cp -Rp "${tile_dir}/../.git" "${build_parent}"
  cp -Rp "${tile_dir}"/. "${build_dir}"
}

function download_releases() {
  local tile_dir
  tile_dir="${1}"

  if [[ (! -d "${tile_dir}/releases") && ("${STUB_RELEASES}" != "true") ]]; then
    echo "Missing required directory '${tile_dir}/releases'. Use STUB_RELEASES=true or create this directory and download all required release tarballs into it." > /dev/stderr
    exit 1
  fi
}

function download_stemcell() {
  local build_dir
  build_dir="${1}"
  if [ -z "${STEMCELL_PATH}" ]; then
    echo "\$STEMCELL_PATH not set. Using latest Xenial stemcell from bosh.io instead" > /dev/stderr
    STEMCELL_PATH="${build_dir}/stemcell.tgz"
    light_stemcell_url="$(curl -L --silent 'https://bosh.io/api/v1/stemcells/bosh-aws-xen-hvm-ubuntu-xenial-go_agent' | jq -r 'map(select(.light))[0].light.url')"

    if [ -z "${light_stemcell_url}" ]; then
      echo "Unable to download stemcell from bosh.io"
      exit 1
    fi

    wget --quiet -O "${STEMCELL_PATH}" "${light_stemcell_url}"
  fi
}

function build_tile() {
  kiln bake --metadata base.yml --instance-groups-directory ./instance_groups/ --variables-file ./variables/srt.yml --version 2 --metadata-only --stub-releases

  echo "" > /dev/stderr
  echo "Successfully created tile:" > /dev/stderr
#  cp "${build_dir}/${PRODUCT}-${version}.pivotal" "${output_dir}/"
echo "grep string" > /dev/stderr
  ls > /dev/stderr
 # echo "${build_dir}/tile-${version}.pivotal"
}

function set_flags() {
  tile_flags=""
  tile_flags+="--migrations-directory ./migrations/common "
  tile_flags+="--migrations-directory ./migrations/${PRODUCT} "
  tile_flags+="--runtime-configs-directory ./runtime_configs "
  tile_flags+="--variables-file ./variables/${PRODUCT}.yml "

  export tile_flags
}

function main() {
  local tile_dir bin_dir cwd_name
  tile_dir=$( cd "$( dirname "$( dirname "$0" )")" && pwd )
  bin_dir="$(dirname "${0}")"
  cwd_name="${PWD##*/}"

  build_parent="$(mktemp -d -t "${PRODUCT}.XXXXXXXXX")"
  build_dir="${build_parent}/${cwd_name}"
  build_dir="${tile_dir}"
  trap '{ rm -rf "${build_parent}"; }' EXIT

  local output_dir
  output_dir="${1:-${build_dir}}"

  pushd "${tile_dir}" > /dev/null
    download_releases "${tile_dir}"
    # copy_tile_contents "${tile_dir}" "${build_dir}"
    download_stemcell "${build_dir}"
    set_flags "${tile_dir}"
    build_tile "${build_dir}" "${output_dir}"
  popd > /dev/null
}

main "$@"
